type: edu
custom_name: stage6
files:
- name: src/sorting/Main.java
  visible: true
  text: |
    package sorting;

    import java.util.*;

    public class Main {
        public static void main(final String[] args) {
            Scanner scanner = new Scanner(System.in);

            while (scanner.hasNextLong()) {
                long number = scanner.nextLong();
                // write your code here
            }
        }
    }
  learner_created: false
- name: test/common/SortingToolStage6Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.io.File
    import java.io.FileNotFoundException
    import java.util.*

    class SortingToolStage6Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests() + stage5Tests() + stage6Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            @Suppress("NAME_SHADOWING") var reply = reply

            val fileNameArgIdx = clue.args.indexOf("-outputFile")

            if (fileNameArgIdx != -1) {
                val fileName = clue.args[fileNameArgIdx + 1]

                try {
                    reply = File(fileName).readText()
                } catch (ex: FileNotFoundException) {
                    return CheckResult.wrong(
                        "There is no output file $fileName"
                    )
                }

            }

            return when {
                badArgs(clue.args) -> CheckResult(true)  // TODO: test something here
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun badArgs(args: List<String>): Boolean {
            val unknownArgs =
                    args.toSet() - setOf("-dataType", "-sortingType", "long", "word", "line", "natural", "byCount")

            if (unknownArgs.isNotEmpty()) {
                return true
            }

            if (args.last() == "-dataType" || args.last() == "-sortingType") {
                return true
            }

            return false
        }
    }

    private fun fileTestCase(
            input: String,
            revealTest: Boolean,
            file: String,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(input, revealTest, args.toList()))
                .addArguments(*args)
                .addFile(file, input)
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }

    fun stage5Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long", "-abc"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line", "-cde"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-dataType", "line", "-sortingType"
                )
        )
    }

    fun stage6Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "input.txt",
                        "-sortingType", "byCount", "-inputFile", "input.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "data.dat",
                        "-sortingType", "byCount", "-inputFile", "data.dat", "-outputFile", "out.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        false,
                        "input.txt",
                        "-sortingType", "natural", "-inputFile", "input.txt"
                ),
                fileTestCase(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        false,
                        "data.dat",
                        "-sortingType", "natural", "-inputFile", "data.dat", "-outputFile", "out.txt"
                )
        )
    }


    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }


    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }


    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }


    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
- name: src/sorting/SortIntegers.java
  visible: true
  text: |-
    package sorting;

    import java.lang.reflect.Array;
    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.Scanner;

    public class SortIntegers {
        public static int totalNumbers(ArrayList<Integer> list) {
            return list.size();
        }

        public static ArrayList<Integer> sortedData(ArrayList<Integer> list) {
            Collections.sort(list);
            return list;
        }

        public static void run() {
            ArrayList<Integer> list = new ArrayList<>();
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNextInt()) {
                int number = scanner.nextInt();
                list.add(number);
            }
            if (!list.isEmpty()) {
                Collections.sort(list);
                System.out.println("Total numbers: "+ SortIntegers.totalNumbers(list) + ".");
                System.out.println("Sorted data: " + list.toString().replace("[","").replace("]","").replace(",",""));

            }
        }

    }
  learner_created: true
- name: src/sorting/MapUtil.java
  visible: true
  learner_created: true
- name: out.txt
  visible: true
  learner_created: true
- name: src/sorting/IntegerSorting.java
  visible: true
  text: |
    package sorting;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.Scanner;

    public class IntegerSorting {
        public static int totalNumbers (ArrayList<Integer> list) {
            return list.size();
        }

        public static int highestNumber (ArrayList<Integer> list) {
            Collections.sort(list);
            return list.get(list.size() - 1);
        }

        public static int highestFrequency (ArrayList<Integer> list) {
            Collections.sort(list);
            int highest =  list.get(list.size() - 1);
            return Collections.frequency(list,highest);
        }

        public static int highestPercentage (ArrayList<Integer> list) {
            return (highestFrequency(list) / list.size() ) * 100;
        }

        public static void run () {
            ArrayList<Integer> list = new ArrayList<>();
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNextInt()) {
                int number = scanner.nextInt();
                list.add(number);
            }
            System.out.println("Total numbers: " + IntegerSorting.totalNumbers(list) + ".");
            System.out.println("The greatest number: " + IntegerSorting.highestNumber(list) + "(" + IntegerSorting.highestFrequency(list) + " time(s), " + IntegerSorting.highestPercentage(list) + "%).");
        }
    }
  learner_created: true
- name: src/sorting/WordSorting.java
  visible: true
  text: |-
    package sorting;

    import java.util.*;

    public class WordSorting {
        public static int totalWords (ArrayList<String> list) {
            return list.size();
        }

        public static String longestWord (ArrayList<String> list) {
            Collections.sort(list, (a, b)->Integer.compare(a.length(), b.length()));
            return list.get(list.size() - 1);
        }

        public static int highestFrequency (ArrayList<String> list) {
            Collections.sort(list);
            String highest =  list.get(list.size() - 1);
            return Collections.frequency(list,highest);
        }

        public static int itemPercentage (ArrayList<String> list, String item) {
            double result = ((double) Collections.frequency(list,item) / list.size() ) * 100;
            return (int) result;
        }

        public static int highestPercentage (ArrayList<String> list) {
            double result = ((double) WordSorting.highestFrequency(list) / list.size() ) * 100;
            return (int) result;
            //return (highestFrequency(list) / list.size() ) * 100;

        }

        public static void run () {
            ArrayList<String> list = new ArrayList<>();
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNext()) {
                String word = scanner.next();
                if (word.equals("quit")) {
                    System.out.println("Total words: " + WordSorting.totalWords(list) + ".");
                    System.out.println("The longest word: " + WordSorting.longestWord(list) + " (" + WordSorting.highestFrequency(list) + " time(s), " + WordSorting.highestPercentage(list) + "%)." );

                }
                list.add(word);
            }
            if (!list.isEmpty()) {
                System.out.println("Total words: " + WordSorting.totalWords(list));
                System.out.println("The longest word: " + WordSorting.longestWord(list) + " (" + WordSorting.highestFrequency(list) + " time(s), " + WordSorting.highestPercentage(list) + "%).");
            } else {
                System.out.println("Total words: 0");
                System.out.println("The longest word: (" +"" + "0" + " time(s), " + "0" + "%).");
            }
        }
        public static class SortByLex implements Comparator<PairObject> {

            @Override
            public int compare(PairObject p1, PairObject p2) {
                int result = 0;
                if (Integer.parseInt(p1.getValue()) < Integer.parseInt(p2.getValue())) {
                    result = -1;} else if (Integer.parseInt(p2.getValue()) > Integer.parseInt(p1.getValue())) {
                    result = 1;} else if (Integer.parseInt(p1.getValue()) == Integer.parseInt(p2.getValue())) {
                    result = p1.getKey().compareTo(p1.getKey());
                }
                return result;
            }
        }

        public static TreeMap<String, String> createTreeMap (ArrayList<String> list) {
            TreeMap<String, String> map = new TreeMap<>();
            for (String item: list
            ) {
                String value = String.valueOf(Collections.frequency(list, item));
                map.put(item.toString(), value);
            }
            return map;
        }

        public static void runByCount () {
            ArrayList<String> list = new ArrayList<>();
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNext()) {
                String word = scanner.next();
                list.add(word);
            }
            if (!list.isEmpty()){
                TreeMap<String, String> map = createTreeMap(list);
                //
                List<PairObject> listPair = new ArrayList<>();
                for (var entry: map.entrySet()) {
                    PairObject pair = new PairObject();
                    pair.setKey(entry.getKey());
                    pair.setValue(entry.getValue());
                    listPair.add(pair);
                }
                //
                Collections.sort(listPair,new WordSorting.SortByLex());
                //

                System.out.println("Total words: " + WordSorting.totalWords(list) + ".");
                for (PairObject pair: listPair) {
                    System.out.println(pair.getKey() + ": " + pair.getValue() + " time(s), " + itemPercentage(list, pair.getKey()) + "%");
                }

        }}

        public static void runNaturally () {
            ArrayList<String> list = new ArrayList<>();
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNext()) {
                String word = scanner.next();
                list.add(word);
            }
            if (!list.isEmpty()) {
                Collections.sort(list);
                System.out.println("Total words: " + WordSorting.totalWords(list) + ".");
                System.out.println("Sorted data: " + list.toString().replace("[","").replace("]","").replace(",",""));
            }
        }
    }
  learner_created: true
- name: src/sorting/PairObject.java
  visible: true
  text: |
    package sorting;

    public class PairObject {
        private String key;
        private String value;

        public PairObject(String key, String value) {
            this.key = key;
            this.value = value;
        }

        public PairObject() {

        }

        public String getKey() {
            return key;
        }

        public void setKey(String key) {
            this.key = key;
        }

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }
    }
  learner_created: true
- name: src/sorting/LongSorting.java
  visible: true
  text: |-
    package sorting;

    import kotlin.Pair;

    import java.util.*;
    import java.util.Map.Entry;
    import java.util.stream.Collectors;
    import java.util.stream.Stream;

    public class LongSorting {
        public static int totalNumbers (ArrayList<Long> list) {
            return list.size();
        }

        public static Long highestNumber (ArrayList<Long> list) {
            Collections.sort(list);
            return list.get(list.size() - 1);
        }

        public static int highestFrequency (ArrayList<Long> list) {
            Collections.sort(list);
            Long highest =  list.get(list.size() - 1);
            return Collections.frequency(list,highest);
        }

        public static int highestPercentage (ArrayList<Long> list) {
            double result = ((double) LongSorting.highestFrequency(list) / list.size() ) * 100;
            return (int) result;
        }

        public static int itemPercentage (ArrayList<Long> list, Long item) {
            double result = ((double) Collections.frequency(list,item) / list.size() ) * 100;
            return (int) result;
        }

        public static void run () {
            ArrayList<Long> list = new ArrayList<>();
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNextLong()) {
                long number = scanner.nextInt();
                list.add(number);
            }
            if (!list.isEmpty()) {
                System.out.println("Total numbers: " + LongSorting.totalNumbers(list) + ".");
                System.out.println("The greatest number: " + LongSorting.highestNumber(list) + "(" + LongSorting.highestFrequency(list) + " time(s), " + LongSorting.highestPercentage(list) + "%).");
            } else {
                System.out.println("Total numbers: 0");
                System.out.println("The greatest number:  (0 time(s), 0%).");
            }
        }
        public static class SortByLex implements Comparator<PairObject> {


            @Override
            public int compare(PairObject p1, PairObject p2) {
                int result = 0;
                if (Integer.parseInt(p1.getValue()) < Integer.parseInt(p2.getValue())) {
                    result = -1;} else if (Integer.parseInt(p2.getValue()) > Integer.parseInt(p1.getValue())) {
                    result = 1;} else if (Integer.parseInt(p1.getValue()) == Integer.parseInt(p2.getValue())) {
                    result = Integer.parseInt(p1.getKey()) > Integer.parseInt(p2.getKey()) ? 1
                            : Integer.parseInt(p2.getKey()) > Integer.parseInt(p1.getKey()) ? -1 : 0;
                }
                return result;
            }
        }

        public static TreeMap<String, String> createTreeMap (ArrayList<Long> list) {
            TreeMap<String, String> map = new TreeMap<>();
            for (Long item: list
                 ) {
                        String value = String.valueOf(Collections.frequency(list, item));
                    map.put(item.toString(), value);
            }
            return map;
        }

        public static void runByCount () {
            ArrayList<Long> list = new ArrayList<>();
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNextLong()) {
                long number = scanner.nextLong();
                list.add(number);
            }
            if (!list.isEmpty()){
                TreeMap<String, String> map = createTreeMap(list);
               //
                List<PairObject> listPair = new ArrayList<>();
                for (var entry: map.entrySet()) {
                    PairObject pair = new PairObject();
                    pair.setKey(entry.getKey());
                    pair.setValue(entry.getValue());
                   listPair.add(pair);
                }
                //
                Collections.sort(listPair,new SortByLex());
                //

                System.out.println("Total numbers: " + LongSorting.totalNumbers(list) + ".");
                for (PairObject pair: listPair) {
                        System.out.println(pair.getKey() + ": " + pair.getValue() + " time(s), " + itemPercentage(list, Long.parseLong(pair.getKey())) + "%");
                }
            }

        }

        public static void runNaturally () {
            ArrayList<Long> list = new ArrayList<>();
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNextLong()) {
                long number = scanner.nextLong();
                list.add(number);
            }
            if (!list.isEmpty()) {
                Collections.sort(list);
                System.out.println("Total numbers: " + LongSorting.totalNumbers(list) + ".");
                System.out.println("Sorted data: " + list.toString().replace("[","").replace("]","").replace(",",""));
            }
        }
    }
  learner_created: true
- name: src/sorting/LineSorting.java
  visible: true
  text: |-
    package sorting;

    import java.util.*;

    public class LineSorting {
        public static int totalLines (ArrayList<String> list) {
            return list.size();
        }

        public static String longestLine (ArrayList<String> list) {
            Collections.sort(list, (a, b)->Integer.compare(a.length(), b.length()));
            return list.get(list.size() - 1);
        }

        public static int highestFrequency (ArrayList<String> list) {
            Collections.sort(list);
            String highest =  list.get(list.size() - 1);
            return Collections.frequency(list,highest);
        }

        public static int itemPercentage (ArrayList<String> list, String item) {
            double result = ((double) Collections.frequency(list,item) / list.size() ) * 100;
            return (int) result;
        }

        public static int highestPercentage (ArrayList<String> list) {
            double result = ((double) LineSorting.highestFrequency(list) / list.size() ) * 100;
            return (int) result;
        }

        public static void run () {
            ArrayList<String> list = new ArrayList<>();
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                list.add(line);
            }
            if (!list.isEmpty()) {
                System.out.println("Total lines: " + LineSorting.totalLines(list) + ".");
                System.out.println("The longest line:");
                System.out.println(LineSorting.longestLine(list));
                System.out.println("(" + LineSorting.highestFrequency(list) + " times(s), " + LineSorting.highestPercentage(list) + "%).");
            }
            }

        public static class SortByLex implements Comparator<PairObject> {

            @Override
            public int compare(PairObject p1, PairObject p2) {
                int result = 0;
                if (Integer.parseInt(p1.getValue()) < Integer.parseInt(p2.getValue())) {
                    result = -1;} else if (Integer.parseInt(p2.getValue()) > Integer.parseInt(p1.getValue())) {
                    result = 1;} else if (Integer.parseInt(p1.getValue()) == Integer.parseInt(p2.getValue())) {
                    result = p1.getKey().compareTo(p1.getKey());
                }
                return result;
            }
        }

        public static TreeMap<String, String> createTreeMap (ArrayList<String> list) {
            TreeMap<String, String> map = new TreeMap<>();
            for (String item: list
            ) {
                String value = String.valueOf(Collections.frequency(list, item));
                map.put(item.toString(), value);
            }
            return map;
        }

        public static void runByCount () {
            ArrayList<String> list = new ArrayList<>();
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                list.add(line);
            }
            if (!list.isEmpty()){
                TreeMap<String, String> map = createTreeMap(list);
                //
                List<PairObject> listPair = new ArrayList<>();
                for (var entry: map.entrySet()) {
                    PairObject pair = new PairObject();
                    pair.setKey(entry.getKey());
                    pair.setValue(entry.getValue());
                    listPair.add(pair);
                }
                //
                Collections.sort(listPair,new WordSorting.SortByLex());
                //

                System.out.println("Total lines: " + WordSorting.totalWords(list) + ".");
                for (PairObject pair: listPair) {
                    System.out.println(pair.getKey() + ": " + pair.getValue() + " time(s), " + itemPercentage(list, pair.getKey()) + "%");
                }}

        }

        public static void runNaturally () {
            ArrayList<String> list = new ArrayList<>();
            Scanner scanner = new Scanner(System.in);
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                list.add(line);
            }
            if (!list.isEmpty()) {
                Collections.sort(list);
                System.out.println("Total lines: " + LineSorting.totalLines(list) + ".");
                System.out.println("Sorted data:");
                for (String item: list
                     ) {
                    System.out.println(item);
                }
              //  System.out.println("Sorted data: " + list.toString().replace("[","").replace("]","").replace(",",""));
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/45/stages/244/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Fri, 10 Dec 2021 08:25:19 UTC
record: -1
